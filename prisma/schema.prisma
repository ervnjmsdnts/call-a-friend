// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  SERVICE
  CLIENT
}

model User {
  id            String          @id @unique
  email         String          @unique
  name          String
  role          UserRole?
  createdAt     DateTime        @default(now())
  jobPosts      JobPost[]
  services      Service[]
  ServiceRating ServiceRating[]
  Notification  Notification[]
}

enum BudgetRange {
  LOWBUDGET
  MIDBUDGET
  HIGHBUDGET
}

enum ServiceCategory {
  CATERING
  CONSTRUCTION
  DEMOLITION
  MASON
  LABOR
  HELPER
  WELDER
  ELECTRICIAN
  PLUMBING
  MOTOR_MECHANIC
  CAR_MECHANIC
  HOUSE_CLEANING
  SLIDING_GLASS_MAKER
  ROOF_SERVICE
  PAINT_SERVICE
  COMPUTER_TECHNICIAN
}

enum JobStatus {
  PENDING
  ONGOING
  DONE
  TERMINATED
}

model Notification {
  id        String   @id @unique @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  message   String
  isRead    Boolean  @default(true)
  userId    String
}

model JobPost {
  id              String          @id @unique @default(uuid())
  title           String
  address         String
  barangay        String
  description     String?
  contactNumber   String?
  category        ServiceCategory
  acceptedService Service?        @relation(fields: [serviceId], references: [id])
  price           Float           @default(0)
  user            User            @relation(fields: [userId], references: [id])
  status          JobStatus       @default(PENDING)
  userId          String
  createdAt       DateTime        @default(now())
  InviteSerivce   InviteService[]
  serviceId       String?
  ServiceRating   ServiceRating[]
  jobApplications ApplyJob[]
  isActive        Boolean         @default(true)
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  REJECTED
  CANCELLED
  INVALID
}

model InviteService {
  id        String           @id @unique @default(uuid())
  service   Service          @relation(fields: [serviceId], references: [id])
  post      JobPost          @relation(fields: [jobPostId], references: [id])
  message   String?
  status    InvitationStatus @default(PENDING)
  createdAt DateTime         @default(now())
  serviceId String
  jobPostId String
}

model ApplyJob {
  id        String           @id @unique @default(uuid())
  service   Service          @relation(fields: [serviceId], references: [id])
  post      JobPost          @relation(fields: [jobPostId], references: [id])
  message   String?
  status    InvitationStatus @default(PENDING)
  createdAt DateTime         @default(now())
  serviceId String
  jobPostId String
}

model Service {
  id              String          @id @unique @default(uuid())
  name            String
  address         String
  barangay        String
  contactNumber   String?
  description     String?
  price           Float           @default(0)
  category        ServiceCategory
  user            User            @relation(fields: [userId], references: [id])
  createdAt       DateTime        @default(now())
  userId          String
  ratings         ServiceRating[]
  invitations     InviteService[]
  JobPost         JobPost[]
  jobApplications ApplyJob[]
  isActive        Boolean         @default(true)
}

model ServiceRating {
  id        String   @id @unique @default(uuid())
  rating    Int
  comment   String?
  service   Service  @relation(fields: [serviceId], references: [id])
  jobPost   JobPost  @relation(fields: [jobPostId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  serviceId String
  jobPostId String
  userId    String
}
